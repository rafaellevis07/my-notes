// Has Many Through, Models and Queries
https://github.com/brianspinos777/references/tree/main/ruby/rails/rails7/associations



===================================================================================================


// Initial Set up     (belongs_to)

$ rails new <app_name>
$ rails g scaffold Post title:string content:text
$ rails g scaffold Comment content:text


$ rails generate migration AddPostToComments post:references

# Creates a relationship between the tables created. 
# It will add a new foreign key to the post_id column of the comment table


$ bin/rails db:migrate


===================================================================================================


class Post < ApplicationRecord
	has_many :comments, dependent: :destroy
end

# Dependent is an option of Rails collection association declaration to cascade the delete action. 
# The :destroy is to cause the associated object to also be destroyed when its owner is destroyed.


class Comment < ApplicationRecord
	belongs_to :post        #belongs to only one post
end

===================================================================================================


// To test functionality on local

$ rails console

# Type
post1 = Post.create(title: "first post!", content: "this is the content of the first post")
post2 = Post.create(title: "second post!", content: "this is the content of the second post")
post3 = Post.create(title: "third post!!!", content: "this is the content of the third post")

comment1 = Comment.create(content: "I like the content of this post")
comment2 = Comment.create(content: "Well, its ok, I guess...")
comment3 = Comment.create(content: "Nice, 2nd")
comment4 = Comment.create(content: "2nd, YUP...")
comment5 = Comment.create(content: "Nice, 3rd")
comment6 = Comment.create(content: "Who cares!? Comment about the post not your comment!")

post1.comments << comment1
post1.comments << comment2
post2.comments << comment3
post2.comments << comment4
post3.comments << comment5
post3.comments << comment6


Comment.find(1)
Comment.find(1).post
post1.comment_ids # [9,10]



=================================================================================================== views - show (post)

// Viewing comments on posts

- TODO: "add comment" button to post
- fix functionality of add comments

# app/views/posts/show.html.erb

<p style="color: green"><%= notice %></p>

<%= render @post %>


  <!-- RAFA START -->
  <hr />
  <h1>Comments</h1>
  <ul>
    <% @post.comments.each do |comment| %>
    <li><%= comment.content %></li>
  <% end %>
  </ul>
<strong> Add Comment </strong>
     <%= render partial: "comments/form", locals: {comment: @post.comments.new} %>
  <hr />
  <!-- RAFA END -->

<div>
  <%= link_to "Edit this post", edit_post_path(@post) %> |
  <%= link_to "Back to posts", posts_path %>

  <%= button_to "Destroy this post", @post, method: :delete %>
</div>



=======================================================================================


